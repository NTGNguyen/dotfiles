""" REF:
" - https://github.com/romainl/idiomatic-vimrc
" - https://github.com/amix/vimrc/blob/master/vimrcs/basic.vim

""""""""""""""""""""""""""""""""""""""""""""

""" Options

let mapleader = " "
let g:bigfile_size = 1024 * 1024 * 1.5 " 1.5MB

" Compatibility & Encoding
set encoding=UTF-8 " Set file encoding to UTF-8
set nocompatible " Enable modern Vim features

" Clipboard Settings
" set clipboard=unnamed " Use system clipboard for copy-paste

" Search & Navigation
set hlsearch " Highlight search results
set ignorecase " Case-insensitive search
set incsearch " Show search matches while typing
set smartcase " Case-sensitive if uppercase letters are used

" User Interface & Display
set number " Show line numbers
set relativenumber " Show relative line numbers
set scrolloff=4 " Keep 4 lines visible above/below cursor
set sidescrolloff=8 " Keep 8 columns visible when scrolling horizontally
set conceallevel=0 " Show all concealed text
set laststatus=2 " Always show status line (for lightline)
set showtabline=2 " Show tab bar when multiple tabs exist
set noshowmode " Hide mode indicator (for lightline)
set fillchars=eob:\ " No tidle '~' in eob
set shortmess=AcqFI " Reduce message clutter

" Cursor & Mouse Behavior
set mouse=a " Enable mouse support
set nocursorcolumn " Disable highlighting of the cursor column
set nocursorline " Disable highlighting of the cursor line
set whichwrap+=<,>,[,],h,l " Allow wrapping with arrow keys

" File Handling & Backup
set nobackup " Disable backup files
set noswapfile " Disable swap files
set nowb " Disable write backup
set undofile

" Regular Expressions & Search Engine
set regexpengine=0 " Automatically choose the best regex engine

" Clipboard & File Completion
set wildignorecase " Case-insensitive command/file completion

" Color & Visual Enhancements
set termguicolors " Enable true color support (for Catppuccin theme)

set expandtab " Use space instead tab
set shiftwidth=2
set tabstop=2

" Set to auto read when a file is changed from the outside
set autoread
au FocusGained,BufEnter * silent! checktime

" No delay on esc?
set ttimeout
set ttimeoutlen=1
set ttyfast

" Cursor stuff
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50,a:Cursor/lCursor,sm:block

autocmd VimEnter * silent !echo -ne "\e[2 q"

syntax on

""""""""""""""""""""""""""""""""""""""""""""

""" PLUGINS

" autocmd VimEnter * PlugInstall --sync | source $MYVIMRC

call plug#begin()

" Plug 'alker0/chezmoi.vim'
" Plug 'sheerun/vim-polyglot'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'catppuccin/nvim', { 'as': 'catppuccin' }
if has('win32')
  Plug 'christoomey/vim-tmux-navigator'
endif
Plug 'LunarWatcher/auto-pairs'
Plug 'andymass/vim-matchup'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'liuchengxu/vim-which-key'
Plug 'machakann/vim-highlightedyank'
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'mg979/vim-visual-multi', { 'branch': 'master' }
Plug 'prabirshrestha/asyncomplete-buffer.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'psliwka/vim-smoothie'
Plug 'qpkorr/vim-bufkill'
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tribela/vim-transparent'
Plug 'wellle/targets.vim'
Plug 'zivyangll/git-blame.vim'

if filereadable(expand("$HOME") . "/.wakatime.cfg")
  Plug 'wakatime/vim-wakatime'
endif

call plug#end()

""""""""""""""""""""""""""""""""""""""""""""

""" Plug

nnoremap <leader>pi :PlugInstall<CR>
nnoremap <leader>pu :PlugUpdate<CR>
nnoremap <leader>pU :PlugUpgrade<CR>
nnoremap <leader>pc :PlugClean<CR>
nnoremap <leader>ps :PlugStatus<CR>

""""""""""""""""""""""""""""""""""""""""""""

""" junegunn/fzf.vim
nnoremap <leader><leader> :Files<CR>
nnoremap <leader>fC :Commands<CR>
nnoremap <leader>fb :Buffers<CR>
nnoremap <leader>fc :Commits<CR>
nnoremap <leader>fk :Maps<CR>
nnoremap <leader>fm :Marks<CR>
nnoremap <leader>fr :History<CR>
nnoremap <leader>fw :Rg<CR>

""""""""""""""""""""""""""""""""""""""""""""

""" andymass/vim-matchup
let g:matchup_matchparen_offscreen = {'method': ''}

""""""""""""""""""""""""""""""""""""""""""""

""" qpkorr/vim-bufkill

let g:BufKillCreateMappings = 0

nnoremap <leader>c :BD<cr>

""""""""""""""""""""""""""""""""""""""""""""

""" maxbrunsfeld/vim-yankstack
let g:yankstack_map_keys = 0

" nnoremap <M-p> <Plug>yankstack_substitute_older_paste
" nnoremap <M-n> <Plug>yankstack_substitute_newer_paste

" Use this because,... idk vim suck. It's still meta key
nnoremap <Esc>p <Plug>yankstack_substitute_older_paste
nnoremap <Esc>n <Plug>yankstack_substitute_newer_paste

""""""""""""""""""""""""""""""""""""""""""""

""" prabirshrestha/asyncomplete.vim

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
imap <c-@> <Plug>(asyncomplete_force_refresh)

set completeopt=menuone,noinsert,noselect,preview
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

""""""""""""""""""""""""""""""""""""""""""""

""" prabirshrestha/asyncomplete-buffer.vim
call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
      \ 'name': 'buffer',
      \ 'allowlist': ['*'],
      \ 'blocklist': ['go'],
      \ 'completor': function('asyncomplete#sources#buffer#completor'),
      \ 'config': {
      \    'max_buffer_size': 5000000,
      \  },
      \ }))

""""""""""""""""""""""""""""""""""""""""""""

""" preservim/nerdtree

let NERDTreeDirArrowExpandable = ''
let NERDTreeDirArrowCollapsible = ''
let NERDTreeMinimalUI=1
let NERDTreeShowLineNumbers=1
let NERDTreeShowHidden=1


nnoremap <leader>e :NERDTreeToggle<CR>

" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | call feedkeys(":quit\<CR>:\<BS>") | endif

" Relative line number
autocmd FileType nerdtree setlocal relativenumber

""""""""""""""""""""""""""""""""""""""""""""

""" tpope/vim-repeat

filetype plugin indent on

""""""""""""""""""""""""""""""""""""""""""""

""" liuchengxu/vim-which-key

nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
set timeoutlen=500

let g:which_key_map = {}
let g:which_key_map['f'] = { 'name': 'Find' }
let g:which_key_map['o'] = { 'name': 'Options' }
let g:which_key_map['p'] = { 'name': 'Plugins' }

call which_key#register('<Space>', "g:which_key_map")

""""""""""""""""""""""""""""""""""""""""""""

""" catppuccin/vim
if !empty($CATPPUCCIN_FLAVOR)
  let catppuccin_flavor = $CATPPUCCIN_FLAVOR
else
  let catppuccin_flavor = 'mocha'
endif

let colorscheme = 'catppuccin-' . catppuccin_flavor

execute 'colorscheme ' . colorscheme

let g:lightline = {'colorscheme': 'catppuccin'}

""""""""""""""""""""""""""""""""""""""""""""

""" itchyny/lightline.vim
""" mengelbrecht/lightline-bufferline

if !has('gui_running')
  set t_Co=256
  if !has('gui_running') && &term =~ '^\%(screen\|tmux\)'
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  endif
endif

set guitablabel=%N:%M%t " Show tab numbers

let g:lightline.separator = { 'left': "", 'right': "" }
let g:lightline.subseparator = { 'left': "\ue0b1", 'right': "\ue0b3" }

let g:lightline.tabline_separator = { 'left': "", 'right': "" }
let g:lightline.tabline_subseparator = { 'left': "", 'right': "" }

let g:lightline.active = {
      \ 'left': [ [ 'mode', 'paste' ],
      \           [ 'fugitive', 'readonly', 'filename', 'modified' ] ],
      \ 'right': [ [ 'lineinfo' ],
      \            [ 'percent' ],
      \            [ 'fileformat', 'filetype' ] ] }

let g:lightline.tabline = {
      \   'left': [ ['buffers'] ],
      \   'right': [ ['tabs'] ]
      \ }

let g:lightline.component_expand = {
      \   'buffers': 'lightline#bufferline#buffers'
      \ }

let g:lightline.component_function = {
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'mode': 'LightlineMode',
      \ }

let g:lightline.component_type = {
      \   'buffers': 'tabsel'
      \ }

function! LightlineModified()
  return &ft ==# 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! LightlineFilename()
  let fname = expand('%:t')
  return fname =~# '^__Tagbar__\|__Gundo\|NERD_tree' ? '' :
        \ &ft ==# 'vimfiler' ? vimfiler#get_status_string() :
        \ &ft ==# 'unite' ? unite#get_status_string() :
        \ &ft ==# 'vimshell' ? vimshell#get_status_string() :
        \ (LightlineReadonly() !=# '' ? LightlineReadonly() . ' ' : '') .
        \ (fname !=# '' ? fname : '[No Name]') .
        \ (LightlineModified() !=# '' ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*FugitiveHead')
      let mark = ' '  " edit here for cool mark
      let branch = FugitiveHead()
      return branch !=# '' ? mark.branch : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  let fname = expand('%:t')
  return fname =~# '^__Tagbar__' ? 'Tagbar' :
        \ fname ==# 'ControlP' ? 'CtrlP' :
        \ fname ==# '__Gundo__' ? 'Gundo' :
        \ fname ==# '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname =~# 'NERD_tree' ? 'NERDTree' :
        \ &ft ==# 'unite' ? 'Unite' :
        \ &ft ==# 'vimfiler' ? 'VimFiler' :
        \ &ft ==# 'vimshell' ? 'VimShell' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

""""""""""""""""""""""""""""""""""""""""""""

" mg979/vim-visual-multi
" Seem page up down doesn't work
let g:VM_maps = {}
let g:VM_maps['Add Cursor Up'] = '<C-PageUp>'
let g:VM_maps['Add Cursor Down'] = '<C-PageDown>'

""""""""""""""""""""""""""""""""""""""""""""

""" tpope/vim-fugitive

nnoremap <leader>gb :GBrowse<CR>
nnoremap <leader>gb :Git blame<CR>

""""""""""""""""""""""""""""""""""""""""""""

""" zivyangll/git-blame.vim

nnoremap <Leader>gl :<C-u>call gitblame#echo()<CR>

""""""""""""""""""""""""""""""""""""""""""""

""" christoomey/vim-tmux-navigator

if has('win32')
  let g:tmux_navigator_no_mappings = 1

  nnoremap <silent> <C-h> :<C-U>TmuxNavigateLeft<cr>
  nnoremap <silent> <C-j> :<C-U>TmuxNavigateDown<cr>
  nnoremap <silent> <C-k> :<C-U>TmuxNavigateUp<cr>
  nnoremap <silent> <C-l> :<C-U>TmuxNavigateRight<cr>
  nnoremap <silent> <C-\> :<C-U>TmuxNavigatePrevious<cr>
else
  nnoremap <silent> <C-h> <C-w>h
  nnoremap <silent> <C-j> <C-w>j
  nnoremap <silent> <C-k> <C-w>k
  nnoremap <silent> <C-l> <C-w>l
endif

""""""""""""""""""""""""""""""""""""""""""""

""" tiagofumo/vim-nerdtree-syntax-highlight

let g:NERDTreeHighlightCursorline = 0

""""""""""""""""""""""""""""""""""""""""""""

""" machakann/vim-highlightedyank

let g:highlightedyank_highlight_duration = 200


""""""""""""""""""""""""""""""""""""""""""""

""" MAPPING

inoremap jk <Esc>
" nnoremap <leader>x :wq<CR>

" Save
nnoremap <C-s> :w<CR>
inoremap <C-s> <cmd>w<CR>

" Quit
" nnoremap <leader>q :qa!<CR>
" nnoremap <leader>x :wqa!<CR>

" Middle Search Result
nnoremap n nzz
nnoremap N Nzz

" Yank to Last
nnoremap Y y$

" Set No Highlight
nnoremap <Esc> :noh<return>

" Yank All
nnoremap <leader>y :%y+<return>

" Toggle Wrap
nnoremap <leader>ow :set wrap!<CR>

" Split
" nnoremap ss :split<CR>
" nnoremap sv :vsplit<CR>

" Close current window
nnoremap <leader>w :close<CR>
nnoremap sq :close<CR>

" Better Down
" nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')

" Better Up
" nnoremap <expr> k (v:count == 0 ? 'gk' : 'k')

" Go to upper window
nnoremap <C-j> <C-w>j
vnoremap <C-j> <C-w>j

" Go to lower window
nnoremap <C-k> <C-w>k
vnoremap <C-k> <C-w>k

" Go to left window
nnoremap <C-h> <C-w>h
vnoremap <C-h> <C-w>h

" Go to right window
nnoremap <C-l> <C-w>l
vnoremap <C-l> <C-w>l

" Move the line up
nnoremap <A-j> :m .+1<CR>==

" Move the line down
nnoremap <A-k> :m .-2<CR>==

" Move selected lines up (Visual Mode)
vnoremap <A-j> :m '>+1<CR>gv=gv

" Move selected lines down (Visual Mode)
vnoremap <A-k> :m '<-2<CR>gv=gv

" Indent backward (Visual Mode)
vnoremap < <gv

" Indent forward (Visual Mode)
vnoremap > >gv

" Better Paste (Visual Mode)
vnoremap p "_dP

" Sort (Visual Mode)
vnoremap <leader>us :sort<CR>gv<ESC>

" Sort Unique (Visual Mode)
vnoremap <leader>uu :sort u<CR>gv<ESC>

" Override default x keybind to delete without putting into default register
" nnoremap X "_dd
" vnoremap x "_d

" Navigate buffer
nnoremap H :bprevious<CR>
nnoremap L :bnext<CR>

" Access register with leader
nnoremap <silent> <leader>1 "+  
vnoremap <silent> <leader>1 "+  
xnoremap <silent> <leader>1 "+  
onoremap <silent> <leader>1 "+  

nnoremap <silent> <leader>2 "*  
vnoremap <silent> <leader>2 "*  
xnoremap <silent> <leader>2 "*  
onoremap <silent> <leader>2 "*  

nnoremap <silent> <leader>0 "_  
vnoremap <silent> <leader>0 "_  
xnoremap <silent> <leader>0 "_  
onoremap <silent> <leader>0 "_  

" Close buffer
" nnoremap <leader>c :Bclose<cr>
nnoremap <leader>C :bufdo bdelete<cr>

" Resize window
nnoremap <C-right> :vertical resize +2<CR>
nnoremap <C-left> :vertical resize -2<CR>
nnoremap <C-up> :resize +2<CR>
nnoremap <C-down> :resize -2<CR>

" Navigate tab
nnoremap <Left> :tabprevious<CR>
nnoremap <Right> :tabnext<CR>
nnoremap <Up> :tabnew<CR>
nnoremap <Down> :tabclose<CR>

" From amix/vimrc, for * and # to search
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

""""""""""""""""""""""""""""""""""""""""""""

""" AUTOCMD

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Set tab 4 for those fts
autocmd FileType c,cpp,cs,py set tabstop=4 shiftwidth=4 expandtab

" q to close those fts
autocmd FileType Avante,dbout,git,fugitiveblame,help setlocal nobuflisted | nnoremap <buffer> q :close<CR>

" Create dir when save
autocmd BufWritePre * call mkdir(expand("<afile>:p:h"), "p")

" DetectBigfile
autocmd BufReadPre * call BigFile()

""""""""""""""""""""""""""""""""""""""""""""

""" CUSTOM COMMAND

function! BigFile()
  let l:path = expand('<afile>:p')
  if getfsize(l:path) > g:bigfile_size
    setlocal syntax=
    setlocal nospell
    setlocal smoothie_enabled=0
  endif
endfunction

" From amix/vimrc
" Don't close window, when deleting a buffer
" command! Bclose call <SID>BufcloseCloseIt()
" function! <SID>BufcloseCloseIt()
"     let l:currentBufNum = bufnr("%")
"     let l:alternateBufNum = bufnr("#")
"
"     if buflisted(l:alternateBufNum)
"         buffer #
"     else
"         bnext
"     endif
"
"     if bufnr("%") == l:currentBufNum
"         new
"     endif
"
"     if buflisted(l:currentBufNum)
"         execute("bdelete! ".l:currentBufNum)
"     endif
" endfunction
